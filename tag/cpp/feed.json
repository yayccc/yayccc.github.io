{
    "version": "https://jsonfeed.org/version/1",
    "title": "yayaccc • All posts by \"cpp\" tag",
    "description": "",
    "home_page_url": "https://yayaccc.us.kg",
    "items": [
        {
            "id": "https://yayaccc.us.kg/Cpp%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E9%94%99%E8%AF%AF%EF%BC%9A%E5%8D%95%E5%8F%8D%E6%96%9C%E6%9D%A0%E5%AF%BC%E8%87%B4%E7%9A%84%E9%80%9A%E7%94%A8%E5%AD%97%E7%AC%A6%E5%90%8D%E6%A0%BC%E5%BC%8F%E4%B8%8D%E6%AD%A3%E7%A1%AE/",
            "url": "https://yayaccc.us.kg/Cpp%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E9%94%99%E8%AF%AF%EF%BC%9A%E5%8D%95%E5%8F%8D%E6%96%9C%E6%9D%A0%E5%AF%BC%E8%87%B4%E7%9A%84%E9%80%9A%E7%94%A8%E5%AD%97%E7%AC%A6%E5%90%8D%E6%A0%BC%E5%BC%8F%E4%B8%8D%E6%AD%A3%E7%A1%AE/",
            "title": "Cpp文件路径错误：单反斜杠导致的通用字符名格式不正确",
            "date_published": "2024-07-29T15:16:17.000Z",
            "content_html": "<p><strong>问题</strong>：在学习文件操作时，出现了报错 “<strong>通用字符名格式不正确</strong>” 。<br />\n经过查阅资料，对于 Windows 系统，文件路径中使用反斜杠  <code>\\</code>  作为目录分隔符。然而，如果在代码中只使用单个反斜杠  <code>\\</code> ，可能会引发格式不正确的通用字符名错误。这是因为反斜杠在 C++ 中是转义字符，用来表示特殊字符序列，例如  <code>\\n</code>  表示换行， <code>\\t</code>  表示制表符。</p>\n<h1 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述</h1>\n<p>当我们在 C++ 代码中指定文件路径时，如果路径中只使用单个反斜杠  <code>\\</code> ，编译器会将其视为转义字符的开始，导致解析错误。例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string filePath <span class=\"token operator\">=</span> <span class=\"token string\">\"C:\\path\\file.txt\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误示例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>fstream <span class=\"token function\">file</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Failed to open file.\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    file <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello, World!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    file<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>字符串  <code>C:\\path\\file.txt</code>  中的反斜杠  <code>\\</code>  会导致编译器试图将  <code>\\p</code> 、 <code>\\t</code>  等解释为转义字符，从而引发错误。</p>\n<h1 id=\"解决方法\"><a class=\"anchor\" href=\"#解决方法\">#</a> 解决方法</h1>\n<p>要解决这个问题，我们需要确保在文件路径中正确地使用反斜杠。这里有两种常见的解决方法：</p>\n<h2 id=\"方法一使用双反斜杠\"><a class=\"anchor\" href=\"#方法一使用双反斜杠\">#</a> 方法一：使用双反斜杠</h2>\n<p>将每个反斜杠  <code>\\</code>  替换为双反斜杠  <code>\\\\</code> 。这样，编译器会将其解释为一个普通的反斜杠字符。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    string filePath <span class=\"token operator\">=</span> <span class=\"token string\">\"C:\\\\path\\\\to\\\\your\\\\file.txt\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确示例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    fstream <span class=\"token function\">file</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Failed to open file.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    file <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello, World!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    file<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"方法二使用原始字符串字面量\"><a class=\"anchor\" href=\"#方法二使用原始字符串字面量\">#</a> 方法二：使用原始字符串字面量</h2>\n<p>C++11 引入了原始字符串字面量，这使得字符串中的反斜杠可以直接表示，而不需要进行转义。原始字符串语法为以  <code>R&quot;( 字符串  )&quot;</code>  。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    string filePath <span class=\"token operator\">=</span> <span class=\"token raw-string string\">R\"(C:\\path\\file.txt)\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用原始字符串字面量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    fstream <span class=\"token function\">file</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t     cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Failed to open file.\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    file <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello, World!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    file<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> 结论</h1>\n<p>在 C++ 中处理文件路径时，必须确保正确使用反斜杠。如果路径中包含反斜杠，应该使用双反斜杠  <code>\\\\</code>  或原始字符串字面量  <code>R&quot;(path)&quot;</code>  来避免转义字符的问题。通过这些方法，可以避免由于单个反斜杠引起的通用字符名格式不正确的错误，<strong>确保文件路径被正确解析和使用</strong>。</p>\n",
            "tags": [
                "CPP"
            ]
        },
        {
            "id": "https://yayaccc.us.kg/Cpp%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/",
            "url": "https://yayaccc.us.kg/Cpp%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/",
            "title": "Cpp面向对象编程",
            "date_published": "2024-07-28T03:53:00.000Z",
            "content_html": "<h1 id=\"c核心编程\"><a class=\"anchor\" href=\"#c核心编程\">#</a> C++ 核心编程</h1>\n<h1 id=\"面向对象的三大特性封装继承多态\"><a class=\"anchor\" href=\"#面向对象的三大特性封装继承多态\">#</a> 面向对象的三大特性：封装，继承，多态</h1>\n<h1 id=\"类和对象\"><a class=\"anchor\" href=\"#类和对象\">#</a> 类和对象</h1>\n<h2 id=\"静态成员\"><a class=\"anchor\" href=\"#静态成员\">#</a> 静态成员</h2>\n<h3 id=\"静态成员变量\"><a class=\"anchor\" href=\"#静态成员变量\">#</a> 静态成员变量</h3>\n<p>所有对象共享<strong>同一份数据</strong></p>\n<p>编译阶段就已经分配内存</p>\n<p>类内声明，类外初始化</p>\n<p>声明： <code>static datatype p</code></p>\n<p>初始化：  <code>datatype classname::p = val</code> ;</p>\n<p>可以通过对象访问静态成员变量</p>\n<p>也可以通过类名访问  <code>classname::p</code></p>\n<h3 id=\"静态成员函数\"><a class=\"anchor\" href=\"#静态成员函数\">#</a> 静态成员函数</h3>\n<p>静态成员函数只能访问静态成员变量</p>\n<p>所有对象共享同一个函数</p>\n<p>函数前面加一个 <code>static</code></p>\n<p>调用函数： <code>classname::func();</code></p>\n<h2 id=\"构造函数与析构函数\"><a class=\"anchor\" href=\"#构造函数与析构函数\">#</a> 构造函数与析构函数</h2>\n<h2 id=\"this指针\"><a class=\"anchor\" href=\"#this指针\">#</a> this 指针</h2>\n<h2 id=\"常函数和常对象\"><a class=\"anchor\" href=\"#常函数和常对象\">#</a> 常函数和常对象</h2>\n<h2 id=\"友元\"><a class=\"anchor\" href=\"#友元\">#</a> 友元</h2>\n<h2 id=\"运算符重载\"><a class=\"anchor\" href=\"#运算符重载\">#</a> 运算符重载</h2>\n<p>对已有的运算符重载，以适应自定义的数据类型，不要滥用运算符重载</p>\n<h3 id=\"1-加号重载\"><a class=\"anchor\" href=\"#1-加号重载\">#</a> 1. 加号重载</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 用成员函数来重载加号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>person <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>person <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tperson <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\ttemp<span class=\"token punctuation\">.</span>p_A<span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>p_A<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>p_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\ttemp<span class=\"token punctuation\">.</span>p_B<span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>p_B<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>p_B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//2. 用全局函数重载加号</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>person <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>person <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span>person <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tperson <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\ttemp<span class=\"token punctuation\">.</span>p_A<span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>p_A<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>p_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\ttemp<span class=\"token punctuation\">.</span>p_B<span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>p_B<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>p_B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"2-左移运算符重载\"><a class=\"anchor\" href=\"#2-左移运算符重载\">#</a> 2. 左移运算符重载</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 只能用全局函数重载 & lt;&lt;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span>cout<span class=\"token punctuation\">,</span>person T<span class=\"token punctuation\">)</span><span class=\"token comment\">// 只传入 person 的值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"p_A:\"</span><span class=\"token operator\">&lt;&lt;</span>T<span class=\"token punctuation\">.</span>p_A<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" p_B:\"</span><span class=\"token operator\">&lt;&lt;</span>T<span class=\"token punctuation\">.</span>p_B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">return</span> cout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 返回 cout, 链式编程思想，ostream 是 cout 的类</span></pre></td></tr></table></figure><h3 id=\"3-递增运算符重载\"><a class=\"anchor\" href=\"#3-递增运算符重载\">#</a> 3. 递增运算符重载</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在成员函数内重载 前置 ++</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>person<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tp_A<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tp_B<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回引用</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 在成员函数内重载 后置 ++</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>person <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//int 为占位参数，与前置 ++ 区分开来</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tperson temp<span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tp_A<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tp_B<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"4-赋值运算符重载\"><a class=\"anchor\" href=\"#4-赋值运算符重载\">#</a> 4. 赋值运算符重载</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>person<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>person <span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p_A<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 先判断是否有值在堆区，如果有则 delete 释放，然再深拷贝</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">delete</span> p_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tp_A<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tp_A <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">.</span>p_A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回赋值后的对象，以便连续赋值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"5-关系运算符重载\"><a class=\"anchor\" href=\"#5-关系运算符重载\">#</a> 5. 关系运算符重载</h3>\n<p>关系运算符有很多，&lt;,&gt;,==,! =</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>person <span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token comment\">// 重载 ==</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p_A<span class=\"token operator\">==</span>T<span class=\"token punctuation\">.</span>p_A<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"6-函数调用运算符重载\"><a class=\"anchor\" href=\"#6-函数调用运算符重载\">#</a> 6. 函数调用运算符重载</h3>\n<p><code>person( )</code>  为创建一个匿名对象，是临时的，当前行执行完后，立即释放</p>\n<p>因为重载（）后的使用方式非常像函数调用，因此也叫仿函数</p>\n<p>仿函数非常的灵活，没有固定的写法</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>string s1<span class=\"token punctuation\">,</span>string s2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tstring s3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\ts3<span class=\"token operator\">=</span>s1<span class=\"token operator\">+</span>s2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> s3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 实现字符串相加</span></pre></td></tr></table></figure><h2 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h2>\n<h3 id=\"继承的基本语法\"><a class=\"anchor\" href=\"#继承的基本语法\">#</a> 继承的基本语法</h3>\n<p><code>class  A : 继承方式  B &#123; &#125;;</code></p>\n<p>A 类称为子类或者派生类</p>\n<p>B 类称为父类或基类</p>\n<p>派生类中的成员  包含两大部分</p>\n<p>一部分是继承的父类的成员，一部分是自己的成员</p>\n<h3 id=\"继承方\"><a class=\"anchor\" href=\"#继承方\">#</a> 继承方</h3>\n<p><img loading=\"lazy\" data-src=\"https://vip.helloimg.com/i/2024/07/28/66a6694d27b27.png\" alt=\"https://vip.helloimg.com/i/2024/07/28/66a6694d27b27.png\" /></p>\n<h3 id=\"继承中的对象模型\"><a class=\"anchor\" href=\"#继承中的对象模型\">#</a> 继承中的对象模型</h3>\n<p>子类包含父类的所有成员（包括私有）</p>\n<h3 id=\"继承中的构造和析构顺序\"><a class=\"anchor\" href=\"#继承中的构造和析构顺序\">#</a> 继承中的构造和析构顺序</h3>\n<p>父类构造函数</p>\n<p>子类析构函数</p>\n<p>子类构造函数</p>\n<p>父类析构函数</p>\n<h3 id=\"继承同名成员处理方式\"><a class=\"anchor\" href=\"#继承同名成员处理方式\">#</a> 继承同名成员处理方式</h3>\n<p>子类访问同名成员，默认访问的是自身的成员</p>\n<p>想要访问父类的成员，需要在成员前加上作用域</p>\n<p><code>p. baseclass:: 成员</code></p>\n<p>对于静态成员函数也可以这样，但也可以通过类名访问</p>\n<p><code>subclass:: baseclass:: 成员</code></p>\n<h3 id=\"多继承语法\"><a class=\"anchor\" href=\"#多继承语法\">#</a> 多继承语法</h3>\n<p>实际开发不建议使用多继承</p>\n<p><code>class  子类 : 继承方式  父类1 ,继承方式  父类2</code></p>\n<h3 id=\"菱形继承\"><a class=\"anchor\" href=\"#菱形继承\">#</a> 菱形继承</h3>\n<p>一个子类继承了多个父类，且这多个父类作为子类继承<strong>同一个父类</strong></p>\n<p>主要带来的问题是继承两份相同的数据，导致二义性问题</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">public</span> <span class=\"token class-name\">C</span></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>利用<strong>虚继承</strong>可以解决菱形继承问题</p>\n<p>在两个子类在继承同一个父类时，加上 <code>virtual</code>  进行虚继承</p>\n<p>这时两个子类的子类只会继承一份成员</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">public</span> <span class=\"token class-name\">C</span></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>虚继承时通过继承<strong>虚基类指针 vbptr</strong> 指向父类的成员</p>\n<h2 id=\"多态\"><a class=\"anchor\" href=\"#多态\">#</a> 多态</h2>\n<p><strong>优点：</strong></p>\n<p>代码组织结构清晰</p>\n<p>可读性强</p>\n<p>便于前期和后期的扩展和维护</p>\n<h3 id=\"多态的基本概念\"><a class=\"anchor\" href=\"#多态的基本概念\">#</a> 多态的基本概念</h3>\n<p>多态分为两类：</p>\n<ol>\n<li>静态多态：函数重载和运算符重载属于静态多态，复用函数名</li>\n<li>动态多态：指程序在运行时再决定调用哪个函数</li>\n</ol>\n<p><strong>区别：</strong></p>\n<ol>\n<li>静态多态的函数地址是早绑定，即编译阶段就已经确定函数地址</li>\n<li>动态多态的函数地址是晚绑定，即运行阶段再确定函数地址</li>\n</ol>\n<h3 id=\"虚函数\"><a class=\"anchor\" href=\"#虚函数\">#</a> 虚函数</h3>\n<p>在函数前加上 <code>virtual</code> ，变为虚函数</p>\n<p>虚函数允许子类提供自身特定的函数实现，运行时根据对象的<strong>实际类型</strong>来调用对应的函数，实现动态多态</p>\n<p><strong>条件：</strong></p>\n<ol>\n<li>父类有虚函数</li>\n<li>子类中有对应函数的重写（函数返回值，函数名，参数都一样叫函数重写）</li>\n</ol>\n<p><strong>使用：</strong></p>\n<p><strong>通过父类指针或者引用指向子类对象或者调用虚函数</strong></p>\n<p><strong>override：</strong></p>\n<p><code>override</code>  是一个关键字，用于显式声明一个成员函数是<strong>重写</strong>基类中的虚函数。它是 C++11 引入的特性，目的是为了提高代码的可读性和安全性。<br />\n例子：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"纯虚函数和抽象类\"><a class=\"anchor\" href=\"#纯虚函数和抽象类\">#</a> 纯虚函数和抽象类</h3>\n<p><strong>纯虚函数</strong>：</p>\n<p><code>virtual  返回值类型  函数名（参数）=0；</code></p>\n<p>只要有一个纯虚函数，就属于抽象类</p>\n<p><strong>抽象类特点：</strong></p>\n<ol>\n<li>无法实例化对象</li>\n<li>子类如果不重写父类中的纯虚函数，否则也属于抽象类</li>\n</ol>\n<h3 id=\"虚析构和纯虚析构\"><a class=\"anchor\" href=\"#虚析构和纯虚析构\">#</a> 虚析构和纯虚析构</h3>\n<p>虚析构函数是用于确保通过<strong>基类指针删除对象</strong>时，能够正确调用派生类的析构函数。</p>\n<p>即在使用时，如果子类有属性开辟到<strong>堆区</strong>，那么父类指针在<strong>释放时</strong>无法调用到子类的析构函数</p>\n<p><strong>解决方法</strong>：将父类的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p>\n<p><strong>虚析构和纯虚析构的共性：</strong></p>\n<ol>\n<li>都可以解决父类指针释放子类对象的问题</li>\n<li>都需要有具体的函数实现</li>\n</ol>\n<p><strong>区别：</strong></p>\n<p>如果有纯虚析构，该类属于抽象类，不能实例化对象</p>\n<p><strong>语法：</strong></p>\n<p>1. 虚析构：  <code>virtual  ~类名( )&#123; &#125;</code></p>\n<p>2. 纯虚析构  在类内声明 <code>virtual ~类名()=0;</code>    在类外  <code>~类名 ()&#123;&#125;</code></p>\n<p>如果子类中没有堆区数据可以不写虚析构</p>\n<h2 id=\"文件操作\"><a class=\"anchor\" href=\"#文件操作\">#</a> 文件操作</h2>\n<h3 id=\"写文件\"><a class=\"anchor\" href=\"#写文件\">#</a> 写文件</h3>\n<ol>\n<li>包含头文件  <code>&lt;fstream&gt;</code></li>\n<li>创建流对象   <code>ofstream  p；</code></li>\n<li>指定打开路径（或文件名）、打开方式   <code>p.open(”文件路径“,打开方式)；</code></li>\n<li>写内容 <code>p &lt;&lt; ” ”;</code></li>\n<li>关闭文件  <code>p.close( );</code></li>\n</ol>\n<p><strong>打开方式：</strong></p>\n<table>\n<thead>\n<tr>\n<th>打开方式</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ios::in</td>\n<td>为读文件而打开文件</td>\n</tr>\n<tr>\n<td>ios::out</td>\n<td>为写文件而打开文件</td>\n</tr>\n<tr>\n<td>ios::ate</td>\n<td>初始位置为文件尾部</td>\n</tr>\n<tr>\n<td>ios::app</td>\n<td>追加方式写文件</td>\n</tr>\n<tr>\n<td>ios::trunc</td>\n<td>如果文件存在，先删除后再创建</td>\n</tr>\n<tr>\n<td>ios::binary</td>\n<td>二进制方式</td>\n</tr>\n</tbody>\n</table>\n<p><strong>报错：</strong></p>\n<p>在想打开特定文件路径的文件时，</p>\n<p>“<strong>通用字符名的格式不正确</strong>”</p>\n<p>把文件路径的 <code>\\</code>  反斜杠都变为 <code>\\\\</code>  两个反斜杠，顺利解决</p>\n",
            "tags": [
                "CPP"
            ]
        }
    ]
}