{
    "version": "https://jsonfeed.org/version/1",
    "title": "null",
    "description": "",
    "home_page_url": "https://yayccc.github.io",
    "items": [
        {
            "id": "https://yayccc.github.io/2024/09/13/%E9%85%8D%E7%BD%AEVSCode/",
            "url": "https://yayccc.github.io/2024/09/13/%E9%85%8D%E7%BD%AEVSCode/",
            "title": "配置VScode详细教程",
            "date_published": "2024-09-13T12:50:56.000Z",
            "content_html": "<h1 id=\"为什么使用vscode\"><a class=\"anchor\" href=\"#为什么使用vscode\">#</a> 为什么使用 VScode？</h1>\n<ol>\n<li><strong>轻量高效</strong>，作为一个代码编辑软件，vscode 的启动迅速，写起来也十分高效<br />\n (你可能想说：DevC++ 和 code::blocks 也是轻量级软件啊，用这些不也一样</li>\n<li>但是 vscode 拥有<strong>丰富的扩展插件支持</strong>，能够自己在内置的扩展商店内选择插件下载，从而提高你的效率和改善你的使用体验</li>\n<li>通过丰富的插件，你可以在 vscode 中使用各种编程语言，例如主流的 C,C++,Python 和 java 语言</li>\n<li>同时 vscode 有<strong>智能的代码补全</strong>，可以很方便的补全代码或者提供代码建议</li>\n<li>有着丰富的主题，让 vscode 变得更好看</li>\n<li>内置的 Git 支持让你能够轻松管理代码版本和进行团队协作，无需离开编辑器</li>\n</ol>\n<h1 id=\"下载vscode\"><a class=\"anchor\" href=\"#下载vscode\">#</a> 下载 VScode</h1>\n<p>直接在 vsc 中文网站或者官网下载<br />\n<a href=\"https://vscode.github.net.cn/\"> Vscode 中文网 </a><br />\n<a href=\"https://code.visualstudio.com/\">Visual Studio Code 官网</a></p>\n<h1 id=\"配置mingw64编译器\"><a class=\"anchor\" href=\"#配置mingw64编译器\">#</a> 配置 MinGW64 编译器</h1>\n<p>VScode 作为文本编辑器，内部没有内置编译器，用户可以自己灵活配置自己所需的编译器<br />\n而编译 c/c++ 代码一般使用 MinGW64</p>\n<h2 id=\"下载方式\"><a class=\"anchor\" href=\"#下载方式\">#</a> 下载方式</h2>\n<h3 id=\"老版本\"><a class=\"anchor\" href=\"#老版本\">#</a> 老版本</h3>\n<p><a href=\"https://sourceforge.net/projects/mingw-w64/\">MinGW-w64 - for 32 and 64 bit Windows download | SourceForge.net</a><br />\n 直接 <code>Download</code>  即可<br />\n<img loading=\"lazy\" data-src=\"https://www.helloimg.com/i/2024/09/13/66e438e30e8d3.png\" alt=\"MInGW64-sourceForge\" /></p>\n<h3 id=\"最新版本\"><a class=\"anchor\" href=\"#最新版本\">#</a> 最新版本</h3>\n<p>(下载可能会比较慢)<br />\n<a href=\"https://github.com/niXman/mingw-builds-binaries/releases\">Releases · niXman/mingw-builds-binaries (github.com)</a><br />\n<img loading=\"lazy\" data-src=\"https://www.helloimg.com/i/2024/09/13/66e438e2e0646.png\" alt=\"MinGw64-release\" /><br />\nWindows 10，64 位及以后版本推荐下载 <code>x86_64-14.2.0-release-win32-seh-ucrt-rt_v12-rev0.7z</code>  版本</p>\n<h3 id=\"确认安装成功\"><a class=\"anchor\" href=\"#确认安装成功\">#</a> 确认安装成功</h3>\n<p>安装后，在开始菜单搜 <code>cmd</code> （命令提示符）<br />\n打开后，输入 <code>gcc -v</code>  后，会输出以下内容</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>yayah<span class=\"token operator\">></span>gcc <span class=\"token parameter variable\">-v</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Using built-in specs.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">COLLECT_GCC</span><span class=\"token operator\">=</span>gcc</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">COLLECT_LTO_WRAPPER</span><span class=\"token operator\">=</span>C:/MinGW64/bin/<span class=\"token punctuation\">..</span>/libexec/gcc/x86_64-w64-mingw32/13.1.0/lto-wrapper.exe</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Target: x86_64-w64-mingw32</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>此处省略</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Thread model: win32</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Supported LTO compression algorithms: zlib</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>gcc version <span class=\"token number\">13.1</span>.0 <span class=\"token punctuation\">(</span>x86_64-win32-seh-rev1, Built by MinGW-Builds project<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>看到 gcc 的版本 <code>gcc version 13.1.0</code>  后就是已经安装成功了</p>\n<h3 id=\"配置编译器环境变量\"><a class=\"anchor\" href=\"#配置编译器环境变量\">#</a> 配置编译器环境变量</h3>\n<p>需要将 MinGW64 的<strong> bin</strong> 文件地址配置在计算机环境变量的<strong> Path</strong> 中<br />\n bin 文件地址例如: <code>C:\\MinGW64\\bin</code> <br />\n 在开始菜单中（也就是电脑中）搜索<strong>环境变量</strong><br />\n<img loading=\"lazy\" data-src=\"https://www.helloimg.com/i/2024/09/13/66e438e2bd8d2.png\" alt=\"searchV\" /><br />\n<strong> 然后点击环境变量</strong><br />\n<img loading=\"lazy\" data-src=\"https://www.helloimg.com/i/2024/09/13/66e438e2b5e52.png\" alt=\"enValue\" /><br />\n 打开环境变量后，双击 <code>Path</code> , 打开后，点击 <code>新建</code> ，填入复制的 <code>MinGw64</code>  中的 <code>bin</code>  的文件地址<br />\n同样的方法在系统变量中也添加 bin 文件的地址<br />\n<img loading=\"lazy\" data-src=\"https://www.helloimg.com/i/2024/09/13/66e438e272555.png\" alt=\"userValue\" /></p>\n<h1 id=\"配置vscode\"><a class=\"anchor\" href=\"#配置vscode\">#</a> 配置 VScode</h1>\n<h2 id=\"takesjson\"><a class=\"anchor\" href=\"#takesjson\">#</a> takes.json</h2>\n<ol>\n<li>先建一个文件夹，然后再创建一个 cpp 文件，写上测试用的 cpp 小程序，接下来需要对其进行 build 操作。单击<strong> Terminal (终端) -&gt; Configure Default Build Task（配置默认生成任务）</strong></li>\n<li>随后在跳出的选择方框中点击 <code>C/C++: g++.exe build active file</code>  以编译 cpp 文件并创建可执行文件 exe，然后会发现左侧文件夹栏目出现 <code>.vscode</code>  的文件夹，里面有着 <code>tasks.json</code>  文件，复制以下代码进行覆盖</li>\n<li>在 <code>command</code>  和 <code>datail</code>  中配置自己相应的 g++ 地址（在 MinGW64 的<strong> bin</strong> 文件中）</li>\n</ol>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token property\">\"tasks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cppbuild\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C/C++: g++.exe build active file\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C:\\\\MinGW64\\\\bin\\\\g++.exe\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"-fdiagnostics-color=always\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"-g\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"$&#123;file&#125;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"-o\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token property\">\"options\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$&#123;fileDirname&#125;\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token property\">\"problemMatcher\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"$gcc\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token property\">\"group\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token property\">\"detail\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"compiler: C:/MinGW64/bin/g++.exe\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"launchjson\"><a class=\"anchor\" href=\"#launchjson\">#</a> launch.json</h2>\n<ol>\n<li>该配置是针对于程序运行的，点击 <code>Run</code> （运行）-&gt; <code>Add Configuration</code> （添加配置），这样会在 <code>.vscode</code>  文件夹中生成 <code>launch.json</code>  文件</li>\n<li>复制以下代码直接覆盖</li>\n<li>在 <code>miDebuggerPath</code>  的位置配置自己相应的 <code>gdb</code>  地址（在<strong> bin</strong> 文件夹中）</li>\n<li>&quot; <code>externalConsole&quot;: true</code>  指的是程序运行时调用黑框输入输出，如果想用界面下方的终端可以改为 false</li>\n</ol>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"g++.exe - Build and debug active file\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cppdbg\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token property\">\"program\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token property\">\"stopAtEntry\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$&#123;fileDirname&#125;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token property\">\"environment\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token property\">\"externalConsole\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token property\">\"MIMode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gdb\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token property\">\"miDebuggerPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C:/MinGW64/bin/gdb.exe\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token property\">\"setupCommands\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Enable pretty-printing for gdb\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token property\">\"text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"-enable-pretty-printing\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token property\">\"ignoreFailures\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token property\">\"preLaunchTask\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C/C++: g++.exe build active file\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"c_cpp_properties_json\"><a class=\"anchor\" href=\"#c_cpp_properties_json\">#</a> c_cpp_properties_json</h2>\n<p>最后一项的配置。该配置时针对于 C/CPP 的相关拓展的，我们首先按下<strong> Ctrl+Shift+P</strong> 以打开全局搜索，输入 <code>C++</code>  并在搜索结果中选择</p>\n<p><strong>C/C++: Edit configurations(UI)<strong> 或者</strong> C/C++: 编辑配置 (UI)</strong></p>\n<ol>\n<li>在 <code>configuration name</code> （配置名称）下点击添加配置，填入 <code>GCC</code> ，然后点确定</li>\n<li>再在 <code>compiler path</code> （编译器路径）下选择自己的 g++ 路径</li>\n<li>最后在 <code>intelliSense mode</code>  下 选择 <code>Windows-gcc-x64</code></li>\n<li>然后会发现 <code>.vscode</code>  文件夹中出现了 <code>c_cpp_properties_json</code>  文件，里面的配置代码应该与下方类似：</li>\n</ol>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"GCC\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token property\">\"includePath\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token string\">\"$&#123;workspaceFolder&#125;/**\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token property\">\"defines\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token string\">\"_DEBUG\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token string\">\"UNICODE\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token string\">\"_UNICODE\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token property\">\"windowsSdkVersion\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"10.0.22000.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token property\">\"compilerPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C:/MinGW64/bin/g++.exe\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token property\">\"cStandard\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"c17\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token property\">\"cppStandard\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"c++17\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token property\">\"intelliSenseMode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"windows-gcc-x64\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>至此，我们就完成了文件的配置，试着运行自己写的程序测试一下吧</p>\n",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "https://yayccc.github.io/2024/07/29/Cpp%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E9%94%99%E8%AF%AF%EF%BC%9A%E5%8D%95%E5%8F%8D%E6%96%9C%E6%9D%A0%E5%AF%BC%E8%87%B4%E7%9A%84%E9%80%9A%E7%94%A8%E5%AD%97%E7%AC%A6%E5%90%8D%E6%A0%BC%E5%BC%8F%E4%B8%8D%E6%AD%A3%E7%A1%AE/",
            "url": "https://yayccc.github.io/2024/07/29/Cpp%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E9%94%99%E8%AF%AF%EF%BC%9A%E5%8D%95%E5%8F%8D%E6%96%9C%E6%9D%A0%E5%AF%BC%E8%87%B4%E7%9A%84%E9%80%9A%E7%94%A8%E5%AD%97%E7%AC%A6%E5%90%8D%E6%A0%BC%E5%BC%8F%E4%B8%8D%E6%AD%A3%E7%A1%AE/",
            "title": "Cpp文件路径错误：单反斜杠导致的通用字符名格式不正确",
            "date_published": "2024-07-29T15:16:17.000Z",
            "content_html": "<p><strong>问题</strong>：在学习文件操作时，出现了报错 “<strong>通用字符名格式不正确</strong>” 。<br />\n经过查阅资料，对于 Windows 系统，文件路径中使用反斜杠  <code>\\</code>  作为目录分隔符。然而，如果在代码中只使用单个反斜杠  <code>\\</code> ，可能会引发格式不正确的通用字符名错误。这是因为反斜杠在 C++ 中是转义字符，用来表示特殊字符序列，例如  <code>\\n</code>  表示换行， <code>\\t</code>  表示制表符。</p>\n<h1 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述</h1>\n<p>当我们在 C++ 代码中指定文件路径时，如果路径中只使用单个反斜杠  <code>\\</code> ，编译器会将其视为转义字符的开始，导致解析错误。例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string filePath <span class=\"token operator\">=</span> <span class=\"token string\">\"C:\\path\\file.txt\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误示例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>fstream <span class=\"token function\">file</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Failed to open file.\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    file <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello, World!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    file<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>字符串  <code>C:\\path\\file.txt</code>  中的反斜杠  <code>\\</code>  会导致编译器试图将  <code>\\p</code> 、 <code>\\t</code>  等解释为转义字符，从而引发错误。</p>\n<h1 id=\"解决方法\"><a class=\"anchor\" href=\"#解决方法\">#</a> 解决方法</h1>\n<p>要解决这个问题，我们需要确保在文件路径中正确地使用反斜杠。这里有两种常见的解决方法：</p>\n<h2 id=\"方法一使用双反斜杠\"><a class=\"anchor\" href=\"#方法一使用双反斜杠\">#</a> 方法一：使用双反斜杠</h2>\n<p>将每个反斜杠  <code>\\</code>  替换为双反斜杠  <code>\\\\</code> 。这样，编译器会将其解释为一个普通的反斜杠字符。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    string filePath <span class=\"token operator\">=</span> <span class=\"token string\">\"C:\\\\path\\\\to\\\\your\\\\file.txt\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确示例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    fstream <span class=\"token function\">file</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Failed to open file.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    file <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello, World!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    file<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"方法二使用原始字符串字面量\"><a class=\"anchor\" href=\"#方法二使用原始字符串字面量\">#</a> 方法二：使用原始字符串字面量</h2>\n<p>C++11 引入了原始字符串字面量，这使得字符串中的反斜杠可以直接表示，而不需要进行转义。原始字符串语法为以  <code>R&quot;( 字符串  )&quot;</code>  。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    string filePath <span class=\"token operator\">=</span> <span class=\"token raw-string string\">R\"(C:\\path\\file.txt)\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用原始字符串字面量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    fstream <span class=\"token function\">file</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t     cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Failed to open file.\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    file <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello, World!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    file<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> 结论</h1>\n<p>在 C++ 中处理文件路径时，必须确保正确使用反斜杠。如果路径中包含反斜杠，应该使用双反斜杠  <code>\\\\</code>  或原始字符串字面量  <code>R&quot;(path)&quot;</code>  来避免转义字符的问题。通过这些方法，可以避免由于单个反斜杠引起的通用字符名格式不正确的错误，<strong>确保文件路径被正确解析和使用</strong>。</p>\n",
            "tags": [
                "CPP"
            ]
        },
        {
            "id": "https://yayccc.github.io/2024/07/28/Cpp%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/",
            "url": "https://yayccc.github.io/2024/07/28/Cpp%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/",
            "title": "Cpp面向对象编程",
            "date_published": "2024-07-28T03:53:00.000Z",
            "content_html": "<h1 id=\"c核心编程\"><a class=\"anchor\" href=\"#c核心编程\">#</a> C++ 核心编程</h1>\n<h1 id=\"面向对象的三大特性封装继承多态\"><a class=\"anchor\" href=\"#面向对象的三大特性封装继承多态\">#</a> 面向对象的三大特性：封装，继承，多态</h1>\n<h1 id=\"类和对象\"><a class=\"anchor\" href=\"#类和对象\">#</a> 类和对象</h1>\n<h2 id=\"静态成员\"><a class=\"anchor\" href=\"#静态成员\">#</a> 静态成员</h2>\n<h3 id=\"静态成员变量\"><a class=\"anchor\" href=\"#静态成员变量\">#</a> 静态成员变量</h3>\n<p>所有对象共享<strong>同一份数据</strong></p>\n<p>编译阶段就已经分配内存</p>\n<p>类内声明，类外初始化</p>\n<p>声明： <code>static datatype p</code></p>\n<p>初始化：  <code>datatype classname::p = val</code> ;</p>\n<p>可以通过对象访问静态成员变量</p>\n<p>也可以通过类名访问  <code>classname::p</code></p>\n<h3 id=\"静态成员函数\"><a class=\"anchor\" href=\"#静态成员函数\">#</a> 静态成员函数</h3>\n<p>静态成员函数只能访问静态成员变量</p>\n<p>所有对象共享同一个函数</p>\n<p>函数前面加一个 <code>static</code></p>\n<p>调用函数： <code>classname::func();</code></p>\n<h2 id=\"构造函数与析构函数\"><a class=\"anchor\" href=\"#构造函数与析构函数\">#</a> 构造函数与析构函数</h2>\n<h2 id=\"this指针\"><a class=\"anchor\" href=\"#this指针\">#</a> this 指针</h2>\n<h2 id=\"常函数和常对象\"><a class=\"anchor\" href=\"#常函数和常对象\">#</a> 常函数和常对象</h2>\n<h2 id=\"友元\"><a class=\"anchor\" href=\"#友元\">#</a> 友元</h2>\n<h2 id=\"运算符重载\"><a class=\"anchor\" href=\"#运算符重载\">#</a> 运算符重载</h2>\n<p>对已有的运算符重载，以适应自定义的数据类型，不要滥用运算符重载</p>\n<h3 id=\"1-加号重载\"><a class=\"anchor\" href=\"#1-加号重载\">#</a> 1. 加号重载</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 用成员函数来重载加号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>person <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>person <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tperson <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\ttemp<span class=\"token punctuation\">.</span>p_A<span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>p_A<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>p_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\ttemp<span class=\"token punctuation\">.</span>p_B<span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>p_B<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>p_B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//2. 用全局函数重载加号</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>person <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>person <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span>person <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tperson <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\ttemp<span class=\"token punctuation\">.</span>p_A<span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>p_A<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>p_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\ttemp<span class=\"token punctuation\">.</span>p_B<span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>p_B<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>p_B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"2-左移运算符重载\"><a class=\"anchor\" href=\"#2-左移运算符重载\">#</a> 2. 左移运算符重载</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 只能用全局函数重载 & lt;&lt;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span>cout<span class=\"token punctuation\">,</span>person T<span class=\"token punctuation\">)</span><span class=\"token comment\">// 只传入 person 的值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"p_A:\"</span><span class=\"token operator\">&lt;&lt;</span>T<span class=\"token punctuation\">.</span>p_A<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" p_B:\"</span><span class=\"token operator\">&lt;&lt;</span>T<span class=\"token punctuation\">.</span>p_B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">return</span> cout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 返回 cout, 链式编程思想，ostream 是 cout 的类</span></pre></td></tr></table></figure><h3 id=\"3-递增运算符重载\"><a class=\"anchor\" href=\"#3-递增运算符重载\">#</a> 3. 递增运算符重载</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在成员函数内重载 前置 ++</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>person<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tp_A<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tp_B<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回引用</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 在成员函数内重载 后置 ++</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>person <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//int 为占位参数，与前置 ++ 区分开来</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tperson temp<span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tp_A<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tp_B<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"4-赋值运算符重载\"><a class=\"anchor\" href=\"#4-赋值运算符重载\">#</a> 4. 赋值运算符重载</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>person<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>person <span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p_A<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 先判断是否有值在堆区，如果有则 delete 释放，然再深拷贝</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">delete</span> p_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tp_A<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tp_A <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">.</span>p_A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回赋值后的对象，以便连续赋值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"5-关系运算符重载\"><a class=\"anchor\" href=\"#5-关系运算符重载\">#</a> 5. 关系运算符重载</h3>\n<p>关系运算符有很多，&lt;,&gt;,==,! =</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>person <span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token comment\">// 重载 ==</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p_A<span class=\"token operator\">==</span>T<span class=\"token punctuation\">.</span>p_A<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"6-函数调用运算符重载\"><a class=\"anchor\" href=\"#6-函数调用运算符重载\">#</a> 6. 函数调用运算符重载</h3>\n<p><code>person( )</code>  为创建一个匿名对象，是临时的，当前行执行完后，立即释放</p>\n<p>因为重载（）后的使用方式非常像函数调用，因此也叫仿函数</p>\n<p>仿函数非常的灵活，没有固定的写法</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>string s1<span class=\"token punctuation\">,</span>string s2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tstring s3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\ts3<span class=\"token operator\">=</span>s1<span class=\"token operator\">+</span>s2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> s3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 实现字符串相加</span></pre></td></tr></table></figure><h2 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h2>\n<h3 id=\"继承的基本语法\"><a class=\"anchor\" href=\"#继承的基本语法\">#</a> 继承的基本语法</h3>\n<p><code>class  A : 继承方式  B &#123; &#125;;</code></p>\n<p>A 类称为子类或者派生类</p>\n<p>B 类称为父类或基类</p>\n<p>派生类中的成员  包含两大部分</p>\n<p>一部分是继承的父类的成员，一部分是自己的成员</p>\n<h3 id=\"继承方\"><a class=\"anchor\" href=\"#继承方\">#</a> 继承方</h3>\n<p><img loading=\"lazy\" data-src=\"https://vip.helloimg.com/i/2024/07/28/66a6694d27b27.png\" alt=\"https://vip.helloimg.com/i/2024/07/28/66a6694d27b27.png\" /></p>\n<h3 id=\"继承中的对象模型\"><a class=\"anchor\" href=\"#继承中的对象模型\">#</a> 继承中的对象模型</h3>\n<p>子类包含父类的所有成员（包括私有）</p>\n<h3 id=\"继承中的构造和析构顺序\"><a class=\"anchor\" href=\"#继承中的构造和析构顺序\">#</a> 继承中的构造和析构顺序</h3>\n<p>父类构造函数</p>\n<p>子类析构函数</p>\n<p>子类构造函数</p>\n<p>父类析构函数</p>\n<h3 id=\"继承同名成员处理方式\"><a class=\"anchor\" href=\"#继承同名成员处理方式\">#</a> 继承同名成员处理方式</h3>\n<p>子类访问同名成员，默认访问的是自身的成员</p>\n<p>想要访问父类的成员，需要在成员前加上作用域</p>\n<p><code>p. baseclass:: 成员</code></p>\n<p>对于静态成员函数也可以这样，但也可以通过类名访问</p>\n<p><code>subclass:: baseclass:: 成员</code></p>\n<h3 id=\"多继承语法\"><a class=\"anchor\" href=\"#多继承语法\">#</a> 多继承语法</h3>\n<p>实际开发不建议使用多继承</p>\n<p><code>class  子类 : 继承方式  父类1 ,继承方式  父类2</code></p>\n<h3 id=\"菱形继承\"><a class=\"anchor\" href=\"#菱形继承\">#</a> 菱形继承</h3>\n<p>一个子类继承了多个父类，且这多个父类作为子类继承<strong>同一个父类</strong></p>\n<p>主要带来的问题是继承两份相同的数据，导致二义性问题</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">public</span> <span class=\"token class-name\">C</span></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>利用<strong>虚继承</strong>可以解决菱形继承问题</p>\n<p>在两个子类在继承同一个父类时，加上 <code>virtual</code>  进行虚继承</p>\n<p>这时两个子类的子类只会继承一份成员</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">public</span> <span class=\"token class-name\">C</span></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>虚继承时通过继承<strong>虚基类指针 vbptr</strong> 指向父类的成员</p>\n<h2 id=\"多态\"><a class=\"anchor\" href=\"#多态\">#</a> 多态</h2>\n<p><strong>优点：</strong></p>\n<p>代码组织结构清晰</p>\n<p>可读性强</p>\n<p>便于前期和后期的扩展和维护</p>\n<h3 id=\"多态的基本概念\"><a class=\"anchor\" href=\"#多态的基本概念\">#</a> 多态的基本概念</h3>\n<p>多态分为两类：</p>\n<ol>\n<li>静态多态：函数重载和运算符重载属于静态多态，复用函数名</li>\n<li>动态多态：指程序在运行时再决定调用哪个函数</li>\n</ol>\n<p><strong>区别：</strong></p>\n<ol>\n<li>静态多态的函数地址是早绑定，即编译阶段就已经确定函数地址</li>\n<li>动态多态的函数地址是晚绑定，即运行阶段再确定函数地址</li>\n</ol>\n<h3 id=\"虚函数\"><a class=\"anchor\" href=\"#虚函数\">#</a> 虚函数</h3>\n<p>在函数前加上 <code>virtual</code> ，变为虚函数</p>\n<p>虚函数允许子类提供自身特定的函数实现，运行时根据对象的<strong>实际类型</strong>来调用对应的函数，实现动态多态</p>\n<p><strong>条件：</strong></p>\n<ol>\n<li>父类有虚函数</li>\n<li>子类中有对应函数的重写（函数返回值，函数名，参数都一样叫函数重写）</li>\n</ol>\n<p><strong>使用：</strong></p>\n<p><strong>通过父类指针或者引用指向子类对象或者调用虚函数</strong></p>\n<p><strong>override：</strong></p>\n<p><code>override</code>  是一个关键字，用于显式声明一个成员函数是<strong>重写</strong>基类中的虚函数。它是 C++11 引入的特性，目的是为了提高代码的可读性和安全性。<br />\n例子：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"纯虚函数和抽象类\"><a class=\"anchor\" href=\"#纯虚函数和抽象类\">#</a> 纯虚函数和抽象类</h3>\n<p><strong>纯虚函数</strong>：</p>\n<p><code>virtual  返回值类型  函数名（参数）=0；</code></p>\n<p>只要有一个纯虚函数，就属于抽象类</p>\n<p><strong>抽象类特点：</strong></p>\n<ol>\n<li>无法实例化对象</li>\n<li>子类如果不重写父类中的纯虚函数，否则也属于抽象类</li>\n</ol>\n<h3 id=\"虚析构和纯虚析构\"><a class=\"anchor\" href=\"#虚析构和纯虚析构\">#</a> 虚析构和纯虚析构</h3>\n<p>虚析构函数是用于确保通过<strong>基类指针删除对象</strong>时，能够正确调用派生类的析构函数。</p>\n<p>即在使用时，如果子类有属性开辟到<strong>堆区</strong>，那么父类指针在<strong>释放时</strong>无法调用到子类的析构函数</p>\n<p><strong>解决方法</strong>：将父类的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p>\n<p><strong>虚析构和纯虚析构的共性：</strong></p>\n<ol>\n<li>都可以解决父类指针释放子类对象的问题</li>\n<li>都需要有具体的函数实现</li>\n</ol>\n<p><strong>区别：</strong></p>\n<p>如果有纯虚析构，该类属于抽象类，不能实例化对象</p>\n<p><strong>语法：</strong></p>\n<p>1. 虚析构：  <code>virtual  ~类名( )&#123; &#125;</code></p>\n<p>2. 纯虚析构  在类内声明 <code>virtual ~类名()=0;</code>    在类外  <code>~类名 ()&#123;&#125;</code></p>\n<p>如果子类中没有堆区数据可以不写虚析构</p>\n<h2 id=\"文件操作\"><a class=\"anchor\" href=\"#文件操作\">#</a> 文件操作</h2>\n<h3 id=\"写文件\"><a class=\"anchor\" href=\"#写文件\">#</a> 写文件</h3>\n<ol>\n<li>包含头文件  <code>&lt;fstream&gt;</code></li>\n<li>创建流对象   <code>ofstream  p；</code></li>\n<li>指定打开路径（或文件名）、打开方式   <code>p.open(”文件路径“,打开方式)；</code></li>\n<li>写内容 <code>p &lt;&lt; ” ”;</code></li>\n<li>关闭文件  <code>p.close( );</code></li>\n</ol>\n<p><strong>打开方式：</strong></p>\n<table>\n<thead>\n<tr>\n<th>打开方式</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ios::in</td>\n<td>为读文件而打开文件</td>\n</tr>\n<tr>\n<td>ios::out</td>\n<td>为写文件而打开文件</td>\n</tr>\n<tr>\n<td>ios::ate</td>\n<td>初始位置为文件尾部</td>\n</tr>\n<tr>\n<td>ios::app</td>\n<td>追加方式写文件</td>\n</tr>\n<tr>\n<td>ios::trunc</td>\n<td>如果文件存在，先删除后再创建</td>\n</tr>\n<tr>\n<td>ios::binary</td>\n<td>二进制方式</td>\n</tr>\n</tbody>\n</table>\n<p><strong>报错：</strong></p>\n<p>在想打开特定文件路径的文件时，</p>\n<p>“<strong>通用字符名的格式不正确</strong>”</p>\n<p>把文件路径的 <code>\\</code>  反斜杠都变为 <code>\\\\</code>  两个反斜杠，顺利解决</p>\n",
            "tags": [
                "CPP"
            ]
        },
        {
            "id": "https://yayccc.github.io/2024/07/27/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E7%AB%A0%E5%B0%81%E9%9D%A2%E5%9B%BE/",
            "url": "https://yayccc.github.io/2024/07/27/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E7%AB%A0%E5%B0%81%E9%9D%A2%E5%9B%BE/",
            "title": "自定义文章封面图",
            "date_published": "2024-07-27T10:01:48.000Z",
            "content_html": "<h1 id=\"自定义文章封面图\"><a class=\"anchor\" href=\"#自定义文章封面图\">#</a> 自定义文章封面图</h1>\n<p>可以在 markdown 文件的顶部</p>\n<p>用 <code>cover: cover.jpg</code>  属性来显示文章封面</p>\n<blockquote>\n<p>title:  文章名字<br />\n date: 2024-7-27 17:00:00<br />\ncover: cover.jpeg #文章封面的对应图片资源<br />\n categories:    #分类<br />\n tags:   #标签</p>\n</blockquote>\n<p>然后也需要你的配置文件 <code>_config.yml</code>  中设置 <code>post_asset_folder: true</code></p>\n<p>再把需要用的图片放到文章对应的文件夹中</p>\n",
            "tags": [
                "博客建立"
            ]
        },
        {
            "id": "https://yayccc.github.io/2024/07/23/hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/",
            "url": "https://yayccc.github.io/2024/07/23/hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/",
            "title": "hexo常用指令",
            "date_published": "2024-07-23T10:17:30.000Z",
            "content_html": "<h1 id=\"hexo常用指令\"><a class=\"anchor\" href=\"#hexo常用指令\">#</a> hexo 常用指令</h1>\n<h2 id=\"new\"><a class=\"anchor\" href=\"#new\">#</a> New</h2>\n<h3 id=\"创建文章\"><a class=\"anchor\" href=\"#创建文章\">#</a> 创建文章</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token punctuation\">[</span>layout<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span></pre></td></tr></table></figure><p>新建一篇文章。 如果没有设置  <code>layout</code>  的话，默认用 <a href=\"https://hexo.io/zh-cn/docs/configuration\">_config.yml</a> 中的  <code>default_layout</code>  参数代替。</p>\n<p>也就是说，在不使用 layout 时，可以省略</p>\n<p>只写文章标题就行</p>\n<p>例如  <code>hexo new aboutMysite</code></p>\n<p>就会在 <code>source/_posts</code>  文件夹中创建 <code>aboutMysite.md</code>  文件</p>\n<p>如果标题包含空格的话，请使用引号 “” 括起来。</p>\n<h3 id=\"创建分类categories\"><a class=\"anchor\" href=\"#创建分类categories\">#</a> 创建分类 categories</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new page categories</pre></td></tr></table></figure><p>在 <code>source/categories</code>  文件夹中创建一个 <code>index.md</code>  文件</p>\n<p>打开 index.md 文件后</p>\n<p>在里面里面添加 <code>type: categories</code></p>\n<blockquote>\n<p>title: 分类的名字<br />\n date: 2024-7-27 18:00:00<br />\ntype: categories</p>\n</blockquote>\n<h2 id=\"clean\"><a class=\"anchor\" href=\"#clean\">#</a> Clean</h2>\n<p>清除缓存文件（db.json）和已生成的静态文件（public）</p>\n<p>一般是网站改动较大时，需要 <code>clean</code> ，然后再生成静态文件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo clean</pre></td></tr></table></figure><h2 id=\"server\"><a class=\"anchor\" href=\"#server\">#</a> Server</h2>\n<p>启动服务器。 默认情况下，访问网为：  <code>http://localhost:4000/</code> 。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo s</pre></td></tr></table></figure><h2 id=\"generate\"><a class=\"anchor\" href=\"#generate\">#</a> Generate</h2>\n<p>生成静态文件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo g</pre></td></tr></table></figure><h2 id=\"deploy\"><a class=\"anchor\" href=\"#deploy\">#</a> Deploy</h2>\n<p>部署站点，在本地生成 <code>.deploy_git</code>  文件夹，并将编译后的文件上传至 GitHub。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo d</pre></td></tr></table></figure><h2 id=\"backup-and-migration\"><a class=\"anchor\" href=\"#backup-and-migration\">#</a> Backup and Migration</h2>\n<p>1. 备份根目录</p>\n<p>2. 重新安装 hexo</p>\n<p>3. 使用备份覆盖 hexo 的目录</p>\n<p>4.clean 后 generate，然后 server 和 deploy</p>\n",
            "tags": [
                "博客建立"
            ]
        },
        {
            "id": "https://yayccc.github.io/2024/03/02/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/",
            "url": "https://yayccc.github.io/2024/03/02/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/",
            "title": "二分答案",
            "date_published": "2024-03-02T01:50:56.000Z",
            "content_html": "<h1 id=\"二分答案\"><a class=\"anchor\" href=\"#二分答案\">#</a> 二分答案</h1>\n<p>二分答案算法很困扰的地方其实就是写好 <strong>边界条件</strong><br />\n又要写好 check 判断函数的边界，又要写好循环二分的边界条件</p>\n<h2 id=\"二分答案的适用情况\"><a class=\"anchor\" href=\"#二分答案的适用情况\">#</a> 二分答案的适用情况</h2>\n<p>有确切的答案区间，最终答案一定在这个区间中<br />\n题目中往往需要：<mark>求... 最小值的最大值 或者求... 最大值的最小值</mark></p>\n<p>所以我们就可以通过二分这个答案区间去不断缩小答案区间<br />\n最终找到答案。</p>\n<p>但最终的答案区间可能有很多数值都符合题目条件<br />\n需要去判断取这个数值区间的最小值还是最大值</p>\n<p>二分答案便是为了解决这样的问题</p>\n<h2 id=\"二分答案的模版整数\"><a class=\"anchor\" href=\"#二分答案的模版整数\">#</a> 二分答案的模版（整数）</h2>\n<p>模版分两种，一种是 <strong>尽量往左搜索答案</strong>（在从小到大的区间中便是搜最小值）<br />\n一种是 <strong>尽量往右搜</strong>（在从小到大的区间便是搜最大值）</p>\n<p>在实际题目中需要判断往区间的哪个方向去搜</p>\n<h3 id=\"check判断函数\"><a class=\"anchor\" href=\"#check判断函数\">#</a> check 判断函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> check（<span class=\"token keyword\">int</span> mid）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 按照题目条件判断</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"往左\"><a class=\"anchor\" href=\"#往左\">#</a> 往左</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tmid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 中点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>r<span class=\"token operator\">=</span>mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">else</span> l<span class=\"token operator\">=</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 中点处再右移一个数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>l<span class=\"token punctuation\">;</span><span class=\"token comment\">// 往左搜时，答案便是 l</span></pre></td></tr></table></figure><h3 id=\"往右\"><a class=\"anchor\" href=\"#往右\">#</a> 往右</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tmid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//+1 是在中点处再右移一个数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>l<span class=\"token operator\">=</span>mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">else</span> r<span class=\"token operator\">=</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 在 mid 处 - 1 就又回到真正的中点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>r<span class=\"token punctuation\">;</span><span class=\"token comment\">// 往右答案便是 r</span></pre></td></tr></table></figure><h3 id=\"思考\"><a class=\"anchor\" href=\"#思考\">#</a> 思考</h3>\n<p>在记的时候要着重理解 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> 的取值<br />\n思考两个模版的在不断二分时，为什么不会使断点处漏掉任何一个数</p>\n<p>而且在 l 和 r 比较大的时候，要记得开 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>n</mi><mi>g</mi><mi>l</mi><mi>o</mi><mi>n</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">long long</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span><br />\n 或者把 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi><mo>=</mo><mtext>（</mtext><mi>l</mi><mo>+</mo><mi>r</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">mid=（l+r)&gt;&gt;1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">mi</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord cjk_fallback\">（</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 改成 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi><mo>=</mo><mi>l</mi><mo>+</mo><mtext>（</mtext><mi>r</mi><mo>−</mo><mi>l</mi><mtext>）</mtext><mo>&gt;</mo><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">mid=l+（r-l）&gt;&gt;1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">mi</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord cjk_fallback\">（</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord cjk_fallback\">）</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n<p>想练练手了？</p>\n<h1 id=\"木材加工洛谷p2440\"><a class=\"anchor\" href=\"#木材加工洛谷p2440\">#</a> 木材加工（洛谷 p2440）</h1>\n<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p>木材厂有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 根原木，现在想把这些木头切割成  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>  段长度<strong>均</strong>为  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> 的小段木头（木头有可能有剩余）。</p>\n<p>当然，我们希望得到的小段木头越长越好，请求出  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> 的最大值。</p>\n<p>木头长度的单位是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi>c</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">1cm</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">m</span></span></span></span> ，原木的长度都是正整数，我们要求切割得到的小段木头的长度也是正整数。</p>\n<p>例如有两根原木长度分别为  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>11</mn></mrow><annotation encoding=\"application/x-tex\">11</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">11</span></span></span></span>  和  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>21</mn></mrow><annotation encoding=\"application/x-tex\">21</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">21</span></span></span></span> ，要求切割成等长的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">6</span></span></span></span>  段，很明显能切割出来的小段木头长度最长为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span> 。</p>\n<h2 id=\"输入格式\"><a class=\"anchor\" href=\"#输入格式\">#</a> 输入格式</h2>\n<p>第一行是两个正整数  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">n,k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> ，分别表示原木的数量，需要得到的小段的数量。</p>\n<p>接下来  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 行，每行一个正整数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，表示一根原木的长度。</p>\n<h2 id=\"输出格式\"><a class=\"anchor\" href=\"#输出格式\">#</a> 输出格式</h2>\n<p>仅一行，即 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> 的最大值。</p>\n<p>如果连 <strong>1cm</strong>  长的小段都切不出来，输出  <code>0</code> 。</p>\n<h2 id=\"样例-1\"><a class=\"anchor\" href=\"#样例-1\">#</a> 样例 #1</h2>\n<h3 id=\"样例输入-1\"><a class=\"anchor\" href=\"#样例输入-1\">#</a> 样例输入 #1</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">232</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">124</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">456</span></pre></td></tr></table></figure><h3 id=\"样例输出-1\"><a class=\"anchor\" href=\"#样例输出-1\">#</a> 样例输出 #1</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">114</span></pre></td></tr></table></figure><h2 id=\"提示\"><a class=\"anchor\" href=\"#提示\">#</a> 提示</h2>\n<h4 id=\"数据规模与约定\"><a class=\"anchor\" href=\"#数据规模与约定\">#</a> 数据规模与约定</h4>\n<p>对于  100%  的数据，<br />\n有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">1\\le n\\le 10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span> , <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><annotation encoding=\"application/x-tex\">1\\le k\\le 10^8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span> , <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>L</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup><mo stretchy=\"false\">(</mo><mi>i</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">1\\le L_i\\le 10^8(i\\in[1,n])</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">])</span></span></span></span></p>\n<p>二分答案的做题思路往往要转变一下，在这题中</p>\n<p><mark>答案一定在区间 0 ~ 所有木头长度之和  sum  中</mark></p>\n<p>所以我们不是去思考这些木头锯成 k 段最大能锯多长<br />\n而是<mark>去思考锯成  l 这么长，能锯多少段</mark></p>\n<p>二分答案往往要以这个思路来思考<br />\n所以我们二分的就是锯出来的小段的长度  l</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">100010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">,</span>m<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tans <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tcin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> m <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> sum <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 特判</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tl <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span><span class=\"token comment\">// 往右搜，搜最大值</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tmid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> k<span class=\"token punctuation\">)</span>l <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token comment\">// 要着重判断二分取等的时候，怎么继续缩小区间</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> r <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> r <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其他练习可以参考</p>\n<p>洛谷 砍树<a href=\"https://www.luogu.com.cn/problem/P1873\"> P1873 </a><br />\n洛谷 跳石头<a href=\"https://www.luogu.com.cn/problem/P2678\"> P2678 </a><br />\n洛谷 数列分段<a href=\"https://www.luogu.com.cn/problem/P1182\"> P1182</a><br />\n 洛谷 路标设置<a href=\"https://www.luogu.com.cn/problem/P3853\"> P3853 </a></p>\n<h2 id=\"实数二分浮点数二分\"><a class=\"anchor\" href=\"#实数二分浮点数二分\">#</a> 实数二分（浮点数二分）</h2>\n<p>以上只是在整数区间进行二分<br />\n但是当然有实数二分了</p>\n<p>不过实数二分比较简单，只有一个模版<br />\n循环条件是判断<mark>到没到某个精度</mark>（比如 1e-5）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">></span><span class=\"token number\">1e-5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tmid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>l<span class=\"token operator\">=</span>mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">else</span> r<span class=\"token operator\">=</span>mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>练习题：<br />\n<a href=\"https://codeforces.com/problemset/problem/371/C?csrf_token=46c31d1bc3b1fea445691fe1fa4374d1\">Problem - 371C - Codeforces</a></p>\n",
            "tags": [
                "基础算法"
            ]
        },
        {
            "id": "https://yayccc.github.io/2024/02/18/hello-world/",
            "url": "https://yayccc.github.io/2024/02/18/hello-world/",
            "title": "Hello World",
            "date_published": "2024-02-18T12:50:56.000Z",
            "content_html": "<h1 id=\"hello-world\"><a class=\"anchor\" href=\"#hello-world\">#</a> Hello world！</h1>\n<p>这是这个网站的第一篇 post！</p>\n<p>这是我建立的个人博客，将来我会在这里写一些文章<br />\n<strong>关于一些技术的整理概括</strong><br />\n<strong>关于一些技术问题的处理</strong><br />\n<strong>关于一些学习成长的经历</strong></p>\n<p>希望通过这个博客，记录我的成长<br />\n也希望通过这个网站，帮助到别人</p>\n",
            "tags": []
        }
    ]
}